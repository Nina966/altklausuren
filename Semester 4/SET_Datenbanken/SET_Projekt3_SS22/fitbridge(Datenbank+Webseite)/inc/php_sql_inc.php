<?php
/**
 * FitBridge
 *
 * @author  Ahmed Sabti, Martin Determann, Bland Azad Saleem, Othmane Kribia
 * @license Only to be used by Fitness24 as permitted by contract [LINK TO CONTRACT]
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////SET LOCALHOST USER/PASSWORD HERE ///////////////////////////////////////////////////////////////
/// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function fitBridge_getHostname()
{
    $hostname = 'localhost'; //set hostname
    return $hostname;
}

function fitBridge_getUsername()
{
    $username = 'root'; //set username
    return $username;
}

function fitBridge_getPassword()
{
    $password = ''; //set password
    return $password;
}

function fitBridge_getDatabase()
{
    $database = 'fitness_datenbank'; //set database name
    return $database;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// FUNCTIONS RELATING TO USERS TABLE IN FITBRIDGE DB /////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Enter the users information into this function, and the user will be appended to the users Table in the fitBridge database.
 * Connection to database occurs within the function, so no additional call to fitBridge_connect or mysqli() is necessary.
 * To change login or password to the fitBridge database visit the fitBridge_connect function, that's where they are defined
 * for the whole website.
 * @sql INSERT INTO users($firstname, $lastname, $username, $password, $birthday, $type, $iban, $about)
 * @param $firstname /No rules other than length less than 30
 * @param $lastname /No rules other than length less than 30
 * @param $username /Must be unique, and less than 30
 * @param $password /No rules here other than maxlength of 30
 * @param $birthday /Format: 'Y-m-d'
 * @param $type /User type (0=user, 1=trainer, 2=admin)
 * @param $iban /Must have length=22 can be left empty by entering 0
 * @param $about /Can be left empty by entering ' '
 * @return -1 for connection error, 2 if username already exists, otherwise returns SQL Query value (true/false) depending on whether or not
 * the appendage of new user was succesfull or not.
 */
function fitBridge_addUser($firstname, $lastname, $username, $password, $birthday, $type, $iban, $about)
{
    $conn = new mysqli(fitBridge_getHostname(), fitBridge_getUsername(), fitBridge_getPassword(), fitBridge_getDatabase());
    if (isset($conn->connection_error)) {
        die('Connection failed : ' . $conn->connect_error);
        return -1;
    } else {
        $sql = "SELECT * FROM users WHERE username LIKE '$username'"; //Check if username already exists
        $result = $conn->query($sql); //Store all instances of the entered username in table
        if ($result->num_rows > 0) { //if there is already a user with a similar username
            return 22;
        } else { //DB Connection succeeded AND username is valid
            //Prepare the necessary fields in the "users" table:
            $stmt = $conn->prepare("INSERT INTO users(name, lastname, username, password, birthday, type, IBAN, about) VALUES(?, ?, ?, ?, ?, ?, ?, ?)");
            //Bind values entered into form to matching row:
            $stmt->bind_param("sssssiss", $firstname, $lastname, $username, $password, $birthday, $type, $iban, $about);
            /*Execute the SQL query generated by the prepare() and bind_param() functions:*/
            $execval = $stmt->execute();
            return 0;
        }
    }
}

/**
 * Use this function to delete users by username. Connects to FitBridge DB, then executes query.
 * @sql DELETE * FROM users WHERE username LIKE '$username'
 * @param $username /username of user to be deleted
 * @return bool|int|mysqli_result -1 for connection error, otherwise returns query->result
 */
function fitBridge_deleteUser($username)
{
    $conn = new mysqli(fitBridge_getHostname(), fitBridge_getUsername(), fitBridge_getPassword(), fitBridge_getDatabase());
    if (isset($conn->connection_error)) {
        die('Connection failed : ' . $conn->connect_error);
        return -1;
    } else {
        $sql = "DELETE FROM `users` WHERE `username` LIKE '$username'"; //Delete user
        $result = $conn->query($sql); //Store query result
        return 0;
    }
}

/**
 * Function used to get information about a user from users table in database based on the users Username or ID.
 * It will connect to FitBridge Database, then search users Table by the specified parameter input and return the
 * search result.
 * @sql SELECT * FROM users WHERE $searchBy LIKE $searchFor
 * @param $searchBy /enter 1 or "id" to search by id, enter 2 or "username" to search by username
 * @param $searchFor /enter the value of id or username as a string
 * @param $getThisUsers /enter the desired field to be returned as string (i.e. "id", "password", "username", etc.)
 * @return int|mixed|void -2 if $searchBy  is invalid, -1 if connection fails, 2 if no such user exists, otherwise returns search result
 */
function fitBridge_getUserInfo($searchBy, $searchFor, $getThisUsers)
{
    switch ($searchBy) {
        case (1) :
            $searchBy = "id";
            break;
        case(2) :
            $searchBy = "username";
            break;
        case ("username"):
        case("id") :
            break;
        default :
            return -2;
    }
    $conn = new mysqli(fitBridge_getHostname(), fitBridge_getUsername(), fitBridge_getPassword(), fitBridge_getDatabase());
    if (isset($conn->connection_error)) {
        die('Connection failed : ' . $conn->connect_error);
        return -1;
    } else {
        $sql = "SELECT * FROM users WHERE $searchBy LIKE '$searchFor'"; //Generate SQL
        $result = $conn->query($sql); //Store all instances of the entered username in table
        if ($result->num_rows == 0) {
            return 2;
        }
        foreach ($result as $row) { //Separate row into fields
            return $row[$getThisUsers];
        }
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// FUNCTIONS RELATING TO APPOINTMENTS TABLE IN FITBRIDGE DB //////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * This function connects to FitBridge DB and adds appointments to the appointment table IF there is not already an
 * appointment at that time with entered trainer. Will not accept past appointments either.
 * @sql INSERT INTO appointments(date, username_trainer, info, time, username_customer) VALUES(?, ?, ?, ?, ?)
 * @param $date /enter date in form 'Y-m-d'
 * @param $time /enter time in form 'H:i:s' (seconds are necessary)
 * @param $trainerUsername /enter the trainers Username as a string
 * @param $customerUsername /enter the customers Username as a string
 * @param $info /enter info (can be left blank)
 * @return bool|int returns 4 if there is already an appoinment with trainer at that time,
 *         returns 2 if date is in the past, if all else succeeds returns value of sql query from database
 */
function fitBridge_addApt($date, $time, $trainerUsername, $customerUsername, $info)
{
    $conn = new mysqli(fitBridge_getHostname(), fitBridge_getUsername(), fitBridge_getPassword(), fitBridge_getDatabase());
    if (isset($conn->connection_error)) {
        die('Connection failed : ' . $conn->connect_error);
    } else if ($date < date('Y-m-d')) { //Date entered is in past
        return 2;
    } else {
        $sql = "SELECT * FROM `appointments` WHERE ((`username_trainer` LIKE '$trainerUsername') AND (`time` LIKE '$time') AND (`date` LIKE '$date'))"; //Check if appointment already exists
        $result = $conn->query($sql); //Store all instances this appointment (if there are any) in $result
        if ($result->num_rows > 0) { //if there is already an appointment with this trainer at this time
            return 4;
        } else { //DB Connection succeeded AND appointment is valid
            //Prepare the necessary fields in the "appointments" table:
            $stmt = $conn->prepare("INSERT INTO appointments(date, username_trainer, info, time, username_customer) VALUES(?, ?, ?, ?, ?)");
            //Bind values entered into form to matching row:
            $stmt->bind_param("sssss", $date, $trainerUsername, $info, $time, $customerUsername);
            /*Execute the SQL query generated by the prepare() and bind_param() functions:*/
            $execval = $stmt->execute();
            return 8;
        }
    }
}

/**
 * Use this function to delete appointments by username and date/time. Connects to FitBridge DB, then executes query.
 * @sql DELETE * FROM users WHERE username LIKE '$trainer_username' AND time LIKE '$time' AND date LIKE '$date'
 * @param $time /use format 'H:i:s'
 * @param $date /user format 'Y-m-d'
 * @param $trainerUsername /username of appointment to be deleted
 * @return bool|int|mysqli_result -1 for connection error, otherwise returns query->result
 */
function fitBridge_deleteApt($time, $date, $trainerUsername)
{
    $conn = new mysqli(fitBridge_getHostname(), fitBridge_getUsername(), fitBridge_getPassword(), fitBridge_getDatabase());
    if (isset($conn->connection_error)) {
        die('Connection failed : ' . $conn->connect_error);
        return -1;
    } else {
        $sql = "DELETE FROM `appointments` WHERE `username_trainer` LIKE '$trainerUsername' AND `time` LIKE '$time' AND `date` LIKE '$date'"; //Delete appointment
        $result = $conn->query($sql); //Store query result
        return 0;
    }
}

/**
 * Function used to get information about an appointment from appointments table in Fitbridge database based on the users Username or ID.
 * It will connect to FitBridge Database, then search appointments Table by the specified parameter input and return the
 * search result(s) as an array.
 * @sql SELECT * FROM appointments WHERE $searchBy LIKE '$searchFor'
 * @param $searchBy /enter 1 to search by TRAINER username, enter 2 to search by  CUSTOMER username
 * @param $searchFor /enter the value of username as a string
 * @param $getThisAppointments /enter the desired field to be returned as string (i.e. "date", "time", "info", etc.)
 * @return int|mixed|void -2 if $searchBy  is invalid, -1 if connection fails, 2 if no such appointment exists, otherwise returns search result as array
 */
function fitBridge_getAptInfo($searchBy, $searchFor, $getThisAppointments)
{
    switch ($searchBy) {
        case (1) :
            $searchBy = 'username_customer';
            break;
        case(2) :
            $searchBy = 'username_trainer';
            break;
        default :
            return -2;
    }
    $conn = new mysqli(fitBridge_getHostname(), fitBridge_getUsername(), fitBridge_getPassword(), fitBridge_getDatabase());
    if (isset($conn->connection_error)) {
        die('Connection failed : ' . $conn->connect_error);
        return -1;
    } else {
        $results = array();
        $sql = "SELECT * FROM `appointments` WHERE `$searchBy` LIKE '$searchFor'"; //Generate SQL
        $result = $conn->query($sql); //Store all instances of the entered appointment in table
        if ($result->num_rows == 0) {
            return 2;
        }
        foreach ($result as $row) { //Separate row into fields
            $results[] = $row[$getThisAppointments];
        }
        return $results;
    }
}

/**
 * Displays all appointments belonging to the entered username (or 1 for all appoinments)
 * @param $belongingTo /enter string of username or 1 to display all appointments
 * @return void Prints as html code (not a very good solution but fine for now)
 */
function fitBridge_displayAppointments($belongingTo)
{
    $conn = new mysqli(fitBridge_getHostname(), fitBridge_getUsername(), fitBridge_getPassword(), fitBridge_getDatabase());
    if ($conn->connect_error) { //if connection fails
        die('Connection failed : ' . $conn->connect_error); //Kill connection to database
        return -1;
    } else { //Get all data from appointments
        if ($belongingTo == 1) {
            $sql = "SELECT * FROM `appointments`"; //Query that gets the entire table contents
        } else {
            $sql = "SELECT * FROM `appointments` WHERE `username_trainer` LIKE '$belongingTo' OR `username_customer` LIKE '$belongingTo'"; //Query that gets the entire table contents
        }
        $result = $conn->query($sql); //Stores query result
        foreach ($result as $row) { //Display these trainers on the window
            echo "<tr>";
            echo "<td>";
            echo $row["username_trainer"];
            echo "</td>";
            echo "<td>";
            echo $row["username_customer"];
            echo "</td>";
            echo "<td>";
            echo $row["date"];
            echo "</td>";
            echo "<td>";
            echo $row["time"];
            echo "</td>";
            echo "<td>";
            echo $row["info"];
            echo "</td>";
            echo "</tr>";
        }
        if ($result->num_rows == 0) {
            echo "<tr>KEINE TERMINE VORHANDEN</tr>";
        }
    }
    $conn->close(); //close connection to FitBridge database
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// FUNCTIONS RELATING TO THE MESSAGES TABLE ///////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * This function adds messages into the messages table after it connects to fitBridge DB.
 * @sql INSERT INTO messages(sender, receiver, date, message, time) values(<params entered to function>)
 * @param $senderUsername /enter username of message sender as a string
 * @param $receiverUsername /enter username of message receiver as a string
 * @param $date /enter date at which message was sent using format: 'Y-m-d'
 * @param $time /enter time at which message was sent using format: 'H:i:s'
 * @param $message /enter the message itself as a string
 * @return bool|int -1 for connection error, sql execution value
 */
function fitBridge_sendMessage($senderUsername, $receiverUsername, $date, $time, $message)
{
    $conn = new mysqli(fitBridge_getHostname(), fitBridge_getUsername(), fitBridge_getPassword(), fitBridge_getDatabase());
    if (isset($conn->connection_error)) {
        die('Connection failed : ' . $conn->connect_error);
        return -1;
    } else {
        //Prepare the necessary fields in the "messages" table:
        $stmt = $conn->prepare("INSERT INTO messages(sender, receiver, date, message, time) VALUES(?, ?, ?, ?, ?)");
        //Bind values entered into form to matching row:
        $stmt->bind_param("sssss", $senderUsername, $receiverUsername, $date, $message, $time);
        /*Execute the SQL query generated by the prepare() and bind_param() functions:*/
        $execval = $stmt->execute();
        return 0;
    }

}

/**
 * This function actually removed messages from the messages table based on sender's username, date and time.
 * @param $time /enter the message send time
 * @param $date /enter the message send date
 * @param $senderUsername /enter username of the sender
 * @return bool|mysqli_result|void returns -1 for bad connection to DB otherwise returns query result
 */
function fitBridge_deleteMessage($time, $date, $senderUsername)
{
    $conn = new mysqli(fitBridge_getHostname(), fitBridge_getUsername(), fitBridge_getPassword(), fitBridge_getDatabase());
    if (isset($conn->connection_error)) {
        die('Connection failed : ' . $conn->connect_error);
        return -1;
    } else {
        $sql = "DELETE FROM `messages` WHERE `sender` LIKE '$senderUsername' AND `date` LIKE '$date' AND `time` LIKE '$time'"; //Delete
        $result = $conn->query($sql); //Store query result
        return 0;
    }
}

/**
 * This function sets the deleted aspect of a message to 1 if deleted by sender and 2 if deleted by receiver. If a message has been deleted by
 * both, the message is removed from DB
 * @param $time /enter the message send time
 * @param $date /enter the message send date
 * @param $val /enter 1 if sender deleted, enter 2 if receiver deleted
 * @param $senderUsername /enter username of the sender
 * @return bool|mysqli_result|void returns -1 for bad connection to DB otherwise returns query result
 */
function fitBridge_markAsDeleted($time, $date, $senderUsername, $val)
{
    $conn = new mysqli(fitBridge_getHostname(), fitBridge_getUsername(), fitBridge_getPassword(), fitBridge_getDatabase());
    if (isset($conn->connection_error)) {
        die('Connection failed : ' . $conn->connect_error);
        return -1;
    } else {
        $sql = "SELECT * FROM `messages` WHERE `sender` LIKE '$senderUsername' AND `time` LIKE '$time' AND `date` LIKE '$date'";
        $result = $conn->query($sql); //Store query result
        $d = 1;
        foreach ($result as $row) {
            if ($row["deleted"] != 0) {
                fitBridge_deleteMessage($time, $date, $senderUsername); //Message permanently deleted
                $d = 0;
            }
        }
        if ($d) {
            $sql = "UPDATE `messages` SET `deleted`='$val' WHERE `sender` LIKE '$senderUsername' AND `time` LIKE '$time' AND `date` LIKE '$date'"; //Mark as deleted for sender
            $result = $conn->query($sql); //Store query result
        }
        return 0;
    }
}

/**
 * Function used to get information about a message from messages table in Fitbridge database based on sender/receivers Username.
 * It will connect to FitBridge Database, then search messages Table by the specified parameter input and return the
 * search result(s) as an array.
 * @sql SELECT * FROM messages WHERE $searchBy LIKE '$searchFor'
 * @param $searchBy /enter 1 to search by senders username or 2 to search by receiver username
 * @param $searchFor /enter the value of username as a string
 * @param $getThisAppointments /enter the desired field to be returned as string (i.e. "date", "time", "message", etc.)
 * @return int|mixed|void -2 if $searchBy is invalid, -1 if connection fails, 2 if no such message exists, otherwise returns search result as array
 */
function fitBridge_getMessageInfo($searchBy, $searchFor, $getThisAppointments)
{
    switch ($searchBy) {
        case (1) :
            $searchBy = 'sender';
            break;
        case (2) :
            $searchBy = 'receiver';
            break;
        default :
            return -2;
    }
    $conn = new mysqli(fitBridge_getHostname(), fitBridge_getUsername(), fitBridge_getPassword(), fitBridge_getDatabase());
    if (isset($conn->connection_error)) {
        die('Connection failed : ' . $conn->connect_error);
        return -1;
    } else {
        $messageResults = array();
        $sql = "SELECT * FROM `messages` WHERE $searchBy LIKE '$searchFor'"; //Generate SQL
        $result = $conn->query($sql); //Store all instances of the entered appointment in table
        if ($result->num_rows == 0) {
            $messageResults[] = 2;
        }
        foreach ($result as $row) { //Separate row into fields
            $messageResults[] = $row[$getThisAppointments];
        }
    }
    return $messageResults;
}

/**
 * This function displays messages as input tags that can be used to delete messages in a form. Connection to database
 * occurs internally
 * @return void
 */
function fitBridge_displayMessagesAsInputs()
{
    $conn = new mysqli(fitBridge_getHostname(), fitBridge_getUsername(), fitBridge_getPassword(), fitBridge_getDatabase());
    if (isset($conn->connection_error)) {
        die('Connection failed : ' . $conn->connect_error);
        return -1;
    } else {
        session_start();
        $username = $_SESSION["this_username"];
        $sql = "select * from messages where receiver like '$username' or sender like '$username'"; //QUERY: All users marked as trainers
        $result = $conn->query($sql); //Stored in result
        if ($result->num_rows > 0) { //If there were any trainers in the FitBridge database
            foreach ($result as $row) { //Display these trainers on website
                if ((($row["receiver"] == $_SESSION["this_username"]) && ($row["deleted"] != 2)) | ((($row["sender"] == $_SESSION["this_username"]) && ($row["deleted"] != 1)))) {
                    echo "<input name='date' type='hidden' value='", $row["date"], "'/>";
                    echo "<input name='sender' type='hidden' value='", $row["sender"], "'/>";
                    echo "<input name='receiver' type='hidden' value='", $row["receiver"], "'/>";
                    echo "<input name='time' type='hidden' value='", $row["time"], "'>";
                    if ($row["sender"] == $_SESSION["this_username"]) {
                        $sentByMe = "mir an ";
                        $sentByMe .= $row["receiver"];
                    } else {
                        $sentByMe = $row["sender"];
                    }
                    echo "<input type='submit' value='nachricht von:  ", $sentByMe, "  am:  ", $row["date"], "  um:  ", $row["time"], " löschen'/>";
                }

            }
        }
    }
}

/**
 * This function is used to display messages belonging to currently logged in user as a table.
 * @return void
 */
function fitBridge_displayMessagesAsTable()
{
    $conn = new mysqli(fitBridge_getHostname(), fitBridge_getUsername(), fitBridge_getPassword(), fitBridge_getDatabase());
    if (isset($conn->connection_error)) {
        die('Connection failed : ' . $conn->connect_error);
        return -1;
    } else {
        session_start();
        $username = $_SESSION["this_username"];
        $sql = "select * from messages where receiver like '$username' or sender like '$username'"; //QUERY: All users marked as trainers
        $result = $conn->query($sql); //Stored in result
        if ($result->num_rows > 0) { //If there were any trainers in the FitBridge database
            foreach ($result as $row) { //Display these trainers on website
                if ((($row["receiver"] == $username) && ($row["deleted"] != 2)) | ((($row["sender"] == $username) && ($row["deleted"] != 1)))) {
                    echo "<tr>";
                    echo "<td>", $row["sender"], "</td>";
                    echo "<td>", $row["receiver"], "</td>";
                    echo "<td>", $row["date"], "</td>";
                    echo "<td>", $row["time"], "</td>";
                    echo "<td>", $row["message"], "</td>";
                    echo "</tr>";
                }
            }
        }
    }

}


